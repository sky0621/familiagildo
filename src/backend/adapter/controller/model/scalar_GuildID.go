// Code generated by github.com/sky0621/familiagildo, DO NOT EDIT.

package model

import (
	"io"
	"strconv"

	"github.com/sky0621/familiagildo/app"
	"github.com/sky0621/familiagildo/app/log"
)

const (
	typeNameGuildID   = "GuildID"
)

type GuildID int64

// UnmarshalGQL GraphQL -> Domain
func (id *GuildID) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return app.NewError("not string")
	}
	typeName, dbUniqueID, err := decodeID(s)
	if err != nil {
		return app.WrapErrorf(err, "failed to decodeID[%s] - typeName:%s", s, typeName)
	}
	*id = GuildID(dbUniqueID)
	return nil
}

// MarshalGQL Domain -> GraphQL
func (id GuildID) MarshalGQL(w io.Writer) {
	_, err := io.WriteString(w, strconv.Quote(id.NodeID()))
	if err != nil {
		log.ErrorSend(err)
	}
}

func (id GuildID) NodeID() string {
	return encodeID(typeNameGuildID, id.DBUniqueID())
}

func (id GuildID) DBUniqueID() int64 {
	return int64(id)
}

func (id GuildID) DBUniqueIDPtr() *int64 {
	r := id.DBUniqueID()
	return &r
}
