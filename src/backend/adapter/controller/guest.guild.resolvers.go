package controller

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"
	"github.com/cockroachdb/errors"
	"github.com/sky0621/familiagildo/adapter/controller/custommodel"
	"github.com/sky0621/familiagildo/app"
	"github.com/sky0621/familiagildo/app/log"
	"github.com/sky0621/familiagildo/domain/vo"
)

// RequestCreateGuildByGuest is the resolver for the requestCreateGuildByGuest field.
func (r *mutationResolver) RequestCreateGuildByGuest(ctx context.Context, input RequestCreateGuildInput) (*GuestToken, error) {
	// FIXME: middleware で ctx に積んだ user_id, role 等から、認証チェック・認可チェックを行う！（このHandlerを実行してよいか否かのチェックはHandlerの責務）

	acceptedNumber, err := r.GuildUsecase.RequestCreateGuildByGuest(ctx, vo.ToGuildName(input.GuildName), vo.ToOwnerMail(input.OwnerMail))
	if err != nil {
		var cErr app.CustomError
		if errors.As(err, &cErr) && cErr.GetErrorCode() == app.AlreadyExistsError {
			log.Warn(cErr.Error())
		} else {
			log.ErrorSend(err)
		}
		return nil, CreateGQLError(ctx, err)
	}

	return &GuestToken{
		AcceptedNumber: acceptedNumber,
	}, err
}

// CreateOwnerByGuest is the resolver for the createOwnerByGuest field.
func (r *mutationResolver) CreateOwnerByGuest(ctx context.Context, input CreateOwnerByGuestInput) (*custommodel.Void, error) {
	panic(fmt.Errorf("not implemented: CreateOwnerByGuest - createOwnerByGuest"))
}

// CreateParticipantByGuest is the resolver for the createParticipantByGuest field.
func (r *mutationResolver) CreateParticipantByGuest(ctx context.Context, input CreateParticipantByGuestInput) (*custommodel.Void, error) {
	panic(fmt.Errorf("not implemented: CreateParticipantByGuest - createParticipantByGuest"))
}
